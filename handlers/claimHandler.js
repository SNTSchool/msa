const {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle
} = require('discord.js');

const { isStaff } = require('../utils/isStaff');
const {
  setClaimer,
  getClaimer,
  clearClaimer,
  updateTicketUI
} = require('../utils/ticketUtils');
const { safeReply } = require('../utils/safeInteraction');



async function handleClaim(interaction, ticketId) {
  const channel = interaction.channel;
  if (!isStaff(interaction.member)) {
    return await safeReply(interaction, {
      content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Claim',
      ephemeral: true
    });
  }

  const currentClaimer = getClaimer(channel.id);
  if (currentClaimer && currentClaimer !== interaction.user.id) {
    return await safeReply(interaction, {
      content: `‚ùå Ticket ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å Claim ‡πÇ‡∏î‡∏¢ <@${currentClaimer}> ‡πÅ‡∏•‡πâ‡∏ß`,
      ephemeral: true
    });
  }

  await safeReply(interaction, {
    content: `‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Claim ticket ‡∏ô‡∏µ‡πâ...`,
    ephemeral: true
  });

  try {
    setClaimer(channel.id, interaction.user.id);
    await channel.setName(`claimed-${ticketId}`);
    await channel.setTopic(`Claimed by ${interaction.user.tag}`);
    await updateTicketUI(channel, 'claimed');

    await interaction.followUp({
      content: `üéØ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ Claim ticket ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      ephemeral: true
    });
  } catch (err) {
    console.error('Claim error:', err);
    await interaction.followUp({
      content: `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞ Claim ticket`,
      ephemeral: true
    });
  }
}

// ------------------------
async function handleUnclaim(interaction, ticketId) {
  const channel = interaction.channel;
  const currentClaimer = getClaimer(channel.id);

  if (currentClaimer !== interaction.user.id) {
    return await safeReply(interaction, {
      content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Claim ticket ‡∏ô‡∏µ‡πâ`,
      ephemeral: true
    });
  }

  await safeReply(interaction, {
    content: `‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á Unclaim ticket ‡∏ô‡∏µ‡πâ...`,
    ephemeral: true
  });

  try {
    
    const cleanId = typeof ticketId === 'string' ? ticketId.trim() : String(ticketId);
    const newName = `order-${cleanId}`;
   

    const hasPermission = channel.permissionsFor(channel.guild.members.me)?.has('ManageChannels');
    if (!hasPermission) {
      console.warn(`‚ö†Ô∏è Bot ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ channel ${channel.name}`);
      return await interaction.followUp({
        content: `‚ö†Ô∏è Bot ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Manage Channels`,
        ephemeral: true
      });
    }
    console.log('c')

    await channel.setName(newName);
   // if (channel.name !== newName) {
    //  await channel.setName(newName);
     // console.log(`‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ channel ‡πÄ‡∏õ‡πá‡∏ô ${newName}`);
    //} else {
    //  console.log(`‚ÑπÔ∏è ‡∏ä‡∏∑‡πà‡∏≠ channel ‡πÄ‡∏õ‡πá‡∏ô ${newName} ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô`);
   // }
    console.log('d')
    await channel.setTopic(`Unclaimed`);
    await updateTicketUI(channel, 'open');
    clearClaimer(channel.id);

    await interaction.followUp({
      content: `üîì ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ Unclaim ticket ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`,
      ephemeral: true
    });
  } catch (err) {
    console.error('‚ùå Unclaim error:', err);
    await interaction.followUp({
      content: `‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞ Unclaim ticket`,
      ephemeral: true
    });
  }
}


module.exports = {
  handleClaim,
  handleUnclaim
};
