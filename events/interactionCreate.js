const {
  Events,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ActionRowBuilder,
  ChannelType,
  PermissionFlagsBits,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle
} = require('discord.js');

const { getNextTicketId, appendRow } = require('../utils/googleSheets');
const { STAFF_ROLE_IDS } = require('../config/roles');
const { handleClaimButton, handleCloseButton } = require('./buttons');


function isStaff(member) {
  return STAFF_ROLE_IDS.some(roleId => member.roles.cache.has(roleId));
}

module.exports = {
  name: Events.InteractionCreate,
  async execute(interaction, client) {
    // üß† Slash Command
    if (interaction.isChatInputCommand()) {
      const command = client.commands.get(interaction.commandName);
      if (!command) return;

      try {
        await command.execute(interaction, client);
      } catch (error) {
        console.error(error);
        const reply = { content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', ephemeral: true };
        interaction.replied || interaction.deferred
          ? await interaction.followUp(reply)
          : await interaction.reply(reply);
      }
    }

    // üéØ Button: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á
    if (interaction.isButton() && interaction.customId === 'orderForm') {
      const modal = new ModalBuilder()
        .setCustomId('submitOrder')
        .setTitle('‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á');

      const itemInput = new TextInputBuilder()
        .setCustomId('item')
        .setLabel('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∞‡πÑ‡∏£?')
        .setStyle(TextInputStyle.Short)
        .setRequired(true);

      const detailInput = new TextInputBuilder()
        .setCustomId('details')
        .setLabel('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°')
        .setStyle(TextInputStyle.Paragraph)
        .setRequired(false);

      modal.addComponents(
        new ActionRowBuilder().addComponents(itemInput),
        new ActionRowBuilder().addComponents(detailInput)
      );

      await interaction.showModal(modal);
    }

    // üìù Modal: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á order-<ticketId>
    if (interaction.isModalSubmit() && interaction.customId === 'submitOrder') {
      const item = interaction.fields.getTextInputValue('item');
      const details = interaction.fields.getTextInputValue('details') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°';
      const categoryId = process.env.ORDER_CH_ID;

      try {
        const ticketId = await getNextTicketId(process.env.SPREADSHEET_ID);

        const channel = await interaction.guild.channels.create({
          name: `order-${ticketId}`,
          type: ChannelType.GuildText,
          parent: categoryId,
          permissionOverwrites: [
            {
              id: interaction.guild.roles.everyone,
              deny: [PermissionFlagsBits.ViewChannel],
            },
            {
              id: interaction.user.id,
              allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
            },
            {
              id: client.user.id,
              allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages],
            }
          ]
        });

        const embed = new EmbedBuilder()
          .setTitle('üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠')
          .addFields(
            { name: '‡∏ú‡∏π‡πâ‡∏™‡∏±‡πà‡∏á', value: `<@${interaction.user.id}>`, inline: true },
            { name: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', value: item, inline: true },
            { name: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', value: details, inline: false }
          )
          .setColor(0x00bfff)
          .setFooter({ text: `Ticket ID: ${ticketId}` });

        const message = `‡∏Ç‡∏≠‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ó‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Mydream Script Shop ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏≤‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏¥‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î Close ‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡∏ú‡∏¥‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö ‡πÇ‡∏î‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏°‡∏≤‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:`;

        const row = new ActionRowBuilder().addComponents(
          new ButtonBuilder().setCustomId(`claim_${ticketId}`).setLabel('üéØ Claim').setStyle(ButtonStyle.Success),
          new ButtonBuilder().setCustomId(`close_${ticketId}`).setLabel('‚ùå Close').setStyle(ButtonStyle.Danger)
        );

        await channel.send({ content: message, embeds: [embed], components: [row] });
        await interaction.reply({ content: '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', ephemeral: true });
      } catch (error) {
        console.error(error);
        await interaction.reply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ', ephemeral: true });
      }
    }

    // üéØ Button: Claim / Unclaim / Close
    if (interaction.isButton()) {
      const [action, ticketId] = interaction.customId.split('_');
      const channel = interaction.channel;

      if (action === 'claim') {
        if (!isStaff(interaction.member)) {
          return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Claim', ephemeral: true });
        }

        await channel.setName(`claimed-${ticketId}`);
        const row = new ActionRowBuilder().addComponents(
          new ButtonBuilder().setCustomId(`unclaim_${ticketId}`).setLabel('üîì Unclaim').setStyle(ButtonStyle.Secondary),
          new ButtonBuilder().setCustomId(`close_${ticketId}`).setLabel('‚ùå Close').setStyle(ButtonStyle.Danger)
        );
        await interaction.update({ components: [row] });
      }

      if (action === 'unclaim') {
        await channel.setName(`order-${ticketId}`);
        const row = new ActionRowBuilder().addComponents(
          new ButtonBuilder().setCustomId(`claim_${ticketId}`).setLabel('üéØ Claim').setStyle(ButtonStyle.Success),
          new ButtonBuilder().setCustomId(`close_${ticketId}`).setLabel('‚ùå Close').setStyle(ButtonStyle.Danger)
        );
        await interaction.update({ components: [row] });
      }

      if (action === 'close') {
        const modal = new ModalBuilder()
          .setCustomId(`confirmClose_${ticketId}`)
          .setTitle('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Ticket')
          .addComponents(
            new ActionRowBuilder().addComponents(
              new TextInputBuilder()
                .setCustomId('reason')
                .setLabel('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•')
                .setStyle(TextInputStyle.Paragraph)
                .setRequired(true)
            )
          );
        await interaction.showModal(modal);
      }
    }

    // üìù Modal: ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î ‚Üí log ‚Üí ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á
    if (interaction.isModalSubmit() && interaction.customId.startsWith('confirmClose_')) {
      const ticketId = interaction.customId.split('_')[1];
      const reason = interaction.fields.getTextInputValue('reason');
      const channel = interaction.channel;

      try {
        const messages = await channel.messages.fetch({ limit: 100 });
        const transcript = messages
          .filter(m => !m.author.bot)
          .map(m => `${m.author.tag}: ${m.content}`)
          .reverse()
          .join('\n');

        await appendRow(process.env.SPREADSHEET_ID, [
          ticketId,
          interaction.user.tag,
          reason,
          transcript,
          new Date().toISOString()
        ]);

        await interaction.reply({ content: '‚úÖ Ticket ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', ephemeral: true });
        await channel.delete();
      } catch (error) {
        console.error(error);
        await interaction.reply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î Ticket', ephemeral: true });
      }
    }
  }
};
